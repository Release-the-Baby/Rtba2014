pairs(smaller_college_df, col=colors)
pairs(smaller_college_df, col=c('red','blue)[colors])
??
kks
s;dafh;l
pairs(smaller_college_df, col=c('red','blue')[colors])
pairs(smaller_college_df, col=colors)
?pairs
# TUTORIAL SUBMISSION #######################
#1. We will use "blue" to denote private university and "red" to denote non-private
#university. To do that, first obtain a vector of character (`colors`) containing
#the value "blue" or "red" matching the university type for that row.
#Hint: you might find it useful to cast a character to factor type
#2. Using colors, generate the same plot as (b) using the same colors from `colors`
#Complete implementation...
colors[college$Private == 'Yes'] <- 'blue'
colors[college$Private == 'Yes'] <- 'red'
colors<- as.factor(colors)
class(colors)
pairs(smaller_college_df, col=colors)
# TUTORIAL SUBMISSION #######################
#1. We will use "blue" to denote private university and "red" to denote non-private
#university. To do that, first obtain a vector of character (`colors`) containing
#the value "blue" or "red" matching the university type for that row.
#Hint: you might find it useful to cast a character to factor type
#2. Using colors, generate the same plot as (b) using the same colors from `colors`
#Complete implementation...
colors[college$Private == 'Yes'] <- 'blue'
colors[college$Private == 'No'] <- 'red'
colors<- as.factor(colors)
pairs(smaller_college_df, col=colors)
# TUTORIAL SUBMISSION #######################
#1. We will use "blue" to denote private university and "red" to denote non-private
#university. To do that, first obtain a vector of character (`colors`) containing
#the value "blue" or "red" matching the university type for that row.
#Hint: you might find it useful to cast a character to factor type
#2. Using colors, generate the same plot as (b) using the same colors from `colors`
#Complete implementation...
colors <- NA
colors[college$Private == 'Yes'] <- 'blue'
colors[college$Private == 'No'] <- 'red'
colors<- as.factor(colors)
pairs(smaller_college_df, col=colors)
#Complete implementation...
plot(y=appsPvt$Apps, x=appsPvt$Private, xlab = 'Private?', ylab = 'Number of Applications', main = 'Comparison of number of applications for Private and Public University')
colors_top10perc[college$Top10perc <= 30] <- 'red'
colors_top10perc <- NA
colors_top10perc[college$Top10perc >  70] <- 'green'
colors_top10perc[college$Top10perc <= 70] <- 'yellow'
colors_top10perc[college$Top10perc <= 50] <- 'orange'
colors_top10perc[college$Top10perc <= 30] <- 'red'
plot(college$Top10perc, col=colors_top10perc)
colors_top10perc[college$Top10perc <= 30] <- 'red'
#a)
#Use the `summary()` function to produce a numerical summary
summary(college)
#Ex 61e2e110369e7f0d08196c39
#Assume that the dataset (College.csv) is found in the current
#working directory
college <- read.csv("College.csv", header = T)
#a)
#Use the `summary()` function to produce a numerical summary
summary(college)
#Ex 61e2e110369e7f0d08196c39
#Assume that the dataset (College.csv) is found in the current
#working directory
college <- read.csv("College.csv", header = T)
#a)
#Use the `summary()` function to produce a numerical summary
summary(college)
#b)
#1. First obtain another dataframe that consists of 4 columns
#Apps, Accept, Enroll, Grade.Rate (in this order) and assign
#to a variable named `smaller_college_df`
#Ensure that the column names are Apps, Accept, Enroll, Grade.Rate (in this order)
#Also make sure that `smaller_college_df` is a data.frame
#2. Using the pairs function, produce a scatterplot matrix of `smaller_college_df`
#Complete implementation...
smaller_college_df <-college[c(which(colnames(college) == 'Apps'),which(colnames(college) == 'Accept'),which(colnames(college) == 'Enroll'),which(colnames(college) == 'Grad.Rate'))]
#ensure that this should be data.frame
class(smaller_college_df)
pairs(smaller_college_df)
#c)
#1. We will use "blue" to denote private university and "red" to denote non-private
#university. To do that, first obtain a vector of character (`colors`) containing
#the value "blue" or "red" matching the university type for that row.
#Hint: you might find it useful to cast a character to factor type
#2. Using colors, generate the same plot as (b) using the same colors from `colors`
#Complete implementation...
colors <- NA
colors[college$Private == 'Yes'] <- 'blue'
colors[college$Private == 'No'] <- 'red'
colors<- as.factor(colors)
pairs(smaller_college_df, col=colors)
#d)
#Use the plot() function to produce a side-by-side boxplots of Apps vs Private.
#Label your x-axis "Private?", y-axis "Number of Applications", and the title
#"Comparison of number of applications for Private and Public University"
#Hint: you might find it useful to cast a character to factor type
question_d <- function(){
#Complete implementation...
plot(y=appsPvt$Apps, x=appsPvt$Private, xlab = 'Private?', ylab = 'Number of Applications', main = 'Comparison of number of applications for Private and Public University')
}
question_d()
#e)
#Generate the scatterplot based on Top10perc
#To do that, first obtain a vector of character (`colors_top10perc`) containing
#following color value:
#<=30 : "red"
#<=50 : "orange"
#<=70 : "yellow"
#>70  : "green"
#Complete implementation...
colors_top10perc <- NA
colors_top10perc[college$Top10perc >  70] <- 'green'
colors_top10perc[college$Top10perc <= 70] <- 'yellow'
colors_top10perc[college$Top10perc <= 50] <- 'orange'
colors_top10perc[college$Top10perc <= 30] <- 'red'
plot(college$Top10perc, col=colors_top10perc)
#f)
#Use the hist() function to generate a histogram of Top10perc
question_f <- function(){
#Complete implementation...
hist(college$Top10perc, col=colors_top10perc)
}
question_f()
#Ex 61e2e110369e7f0d08196c39
#Assume that the dataset (College.csv) is found in the current
#working directory
college <- read.csv("College.csv", header = T)
#a)
#Use the `summary()` function to produce a numerical summary
summary(college)
#b)
#1. First obtain another dataframe that consists of 4 columns
#Apps, Accept, Enroll, Grade.Rate (in this order) and assign
#to a variable named `smaller_college_df`
#Ensure that the column names are Apps, Accept, Enroll, Grade.Rate (in this order)
#Also make sure that `smaller_college_df` is a data.frame
#2. Using the pairs function, produce a scatterplot matrix of `smaller_college_df`
#Complete implementation...
smaller_college_df <-college[c(which(colnames(college) == 'Apps'),which(colnames(college) == 'Accept'),which(colnames(college) == 'Enroll'),which(colnames(college) == 'Grad.Rate'))]
#ensure that this should be data.frame
class(smaller_college_df)
pairs(smaller_college_df)
#c)
#1. We will use "blue" to denote private university and "red" to denote non-private
#university. To do that, first obtain a vector of character (`colors`) containing
#the value "blue" or "red" matching the university type for that row.
#Hint: you might find it useful to cast a character to factor type
#2. Using colors, generate the same plot as (b) using the same colors from `colors`
#Complete implementation...
colors <- NA
colors[college$Private == 'Yes'] <- 'blue'
colors[college$Private == 'No'] <- 'red'
colors<- as.factor(colors)
pairs(smaller_college_df, col=colors)
#d)
#Use the plot() function to produce a side-by-side boxplots of Apps vs Private.
#Label your x-axis "Private?", y-axis "Number of Applications", and the title
#"Comparison of number of applications for Private and Public University"
#Hint: you might find it useful to cast a character to factor type
question_d <- function(){
#Complete implementation...
plot(y=college$Apps, x=college$Private, xlab = 'Private?', ylab = 'Number of Applications', main = 'Comparison of number of applications for Private and Public University')
}
question_d()
#e)
#Generate the scatterplot based on Top10perc
#To do that, first obtain a vector of character (`colors_top10perc`) containing
#following color value:
#<=30 : "red"
#<=50 : "orange"
#<=70 : "yellow"
#>70  : "green"
#Complete implementation...
colors_top10perc <- NA
colors_top10perc[college$Top10perc >  70] <- 'green'
colors_top10perc[college$Top10perc <= 70] <- 'yellow'
colors_top10perc[college$Top10perc <= 50] <- 'orange'
colors_top10perc[college$Top10perc <= 30] <- 'red'
plot(college$Top10perc, col=colors_top10perc)
#f)
#Use the hist() function to generate a histogram of Top10perc
question_f <- function(){
#Complete implementation...
hist(college$Top10perc, col=colors_top10perc)
}
question_f()
#Ex 61e2e110369e7f0d08196c39
#Assume that the dataset (College.csv) is found in the current
#working directory
college <- read.csv("College.csv", header = T)
#a)
#Use the `summary()` function to produce a numerical summary
summary(college)
#b)
#1. First obtain another dataframe that consists of 4 columns
#Apps, Accept, Enroll, Grade.Rate (in this order) and assign
#to a variable named `smaller_college_df`
#Ensure that the column names are Apps, Accept, Enroll, Grade.Rate (in this order)
#Also make sure that `smaller_college_df` is a data.frame
#2. Using the pairs function, produce a scatterplot matrix of `smaller_college_df`
#Complete implementation...
smaller_college_df <-college[c(which(colnames(college) == 'Apps'),which(colnames(college) == 'Accept'),which(colnames(college) == 'Enroll'),which(colnames(college) == 'Grad.Rate'))]
#ensure that this should be data.frame
class(smaller_college_df)
pairs(smaller_college_df)
#c)
#1. We will use "blue" to denote private university and "red" to denote non-private
#university. To do that, first obtain a vector of character (`colors`) containing
#the value "blue" or "red" matching the university type for that row.
#Hint: you might find it useful to cast a character to factor type
#2. Using colors, generate the same plot as (b) using the same colors from `colors`
#Complete implementation...
colors <- NA
colors[college$Private == 'Yes'] <- 'blue'
colors[college$Private == 'No'] <- 'red'
colors<- as.factor(colors)
pairs(smaller_college_df, col=colors)
#d)
#Use the plot() function to produce a side-by-side boxplots of Apps vs Private.
#Label your x-axis "Private?", y-axis "Number of Applications", and the title
#"Comparison of number of applications for Private and Public University"
#Hint: you might find it useful to cast a character to factor type
question_d <- function(){
#Complete implementation...
plot(y=college$Apps, x=college$Private, xlab = 'Private?', ylab = 'Number of Applications', main = 'Comparison of number of applications for Private and Public University')
}
question_d()
#e)
#Generate the scatterplot based on Top10perc
#To do that, first obtain a vector of character (`colors_top10perc`) containing
#following color value:
#<=30 : "red"
#<=50 : "orange"
#<=70 : "yellow"
#>70  : "green"
#Complete implementation...
colors_top10perc <- NA
colors_top10perc[college$Top10perc >  70] <- 'green'
colors_top10perc[college$Top10perc <= 70] <- 'yellow'
colors_top10perc[college$Top10perc <= 50] <- 'orange'
colors_top10perc[college$Top10perc <= 30] <- 'red'
plot(college$Top10perc, col=colors_top10perc)
#f)
#Use the hist() function to generate a histogram of Top10perc
question_f <- function(){
#Complete implementation...
hist(college$Top10perc, col=colors_top10perc)
}
question_f()
#Ex 61e2e110369e7f0d08196c39
#Assume that the dataset (College.csv) is found in the current
#working directory
college <- read.csv("College.csv", header = T)
#a)
#Use the `summary()` function to produce a numerical summary
summary(college)
#b)
#1. First obtain another dataframe that consists of 4 columns
#Apps, Accept, Enroll, Grade.Rate (in this order) and assign
#to a variable named `smaller_college_df`
#Ensure that the column names are Apps, Accept, Enroll, Grade.Rate (in this order)
#Also make sure that `smaller_college_df` is a data.frame
#2. Using the pairs function, produce a scatterplot matrix of `smaller_college_df`
#Complete implementation...
smaller_college_df <-college[c(which(colnames(college) == 'Apps'),which(colnames(college) == 'Accept'),which(colnames(college) == 'Enroll'),which(colnames(college) == 'Grad.Rate'))]
#ensure that this should be data.frame
class(smaller_college_df)
pairs(smaller_college_df)
#c)
#1. We will use "blue" to denote private university and "red" to denote non-private
#university. To do that, first obtain a vector of character (`colors`) containing
#the value "blue" or "red" matching the university type for that row.
#Hint: you might find it useful to cast a character to factor type
#2. Using colors, generate the same plot as (b) using the same colors from `colors`
#Complete implementation...
colors <- NA
colors[college$Private == 'Yes'] <- 'blue'
colors[college$Private == 'No'] <- 'red'
colors<- as.factor(colors)
pairs(smaller_college_df, col=colors)
#d)
#Use the plot() function to produce a side-by-side boxplots of Apps vs Private.
#Label your x-axis "Private?", y-axis "Number of Applications", and the title
#"Comparison of number of applications for Private and Public University"
#Hint: you might find it useful to cast a character to factor type
question_d <- function(){
#Complete implementation...
plot(y=smaller_college_df$Apps, x=smaller_college_df$Private, xlab = 'Private?', ylab = 'Number of Applications', main = 'Comparison of number of applications for Private and Public University')
}
question_d()
#e)
#Generate the scatterplot based on Top10perc
#To do that, first obtain a vector of character (`colors_top10perc`) containing
#following color value:
#<=30 : "red"
#<=50 : "orange"
#<=70 : "yellow"
#>70  : "green"
#Complete implementation...
colors_top10perc <- NA
colors_top10perc[college$Top10perc >  70] <- 'green'
colors_top10perc[college$Top10perc <= 70] <- 'yellow'
colors_top10perc[college$Top10perc <= 50] <- 'orange'
colors_top10perc[college$Top10perc <= 30] <- 'red'
plot(college$Top10perc, col=colors_top10perc)
#f)
#Use the hist() function to generate a histogram of Top10perc
question_f <- function(){
#Complete implementation...
hist(college$Top10perc, col=colors_top10perc)
}
question_f()
source('D:/NUS/ChadCode/TBA2104/tut02/T2.R', echo=TRUE)
source('D:/NUS/ChadCode/TBA2104/tut02/T2.R', echo=TRUE)
source('D:/NUS/ChadCode/TBA2104/tut02/T2.R', echo=TRUE)
source('D:/NUS/ChadCode/TBA2104/tut02/T2.R', echo=TRUE)
source('D:/NUS/ChadCode/TBA2104/tut02/T2.R', echo=TRUE)
colors <- NA
colors[college$Private == 'Yes'] <- 'blue'
colors[college$Private == 'No'] <- 'red'
colors<- as.factor(colors)
pairs(smaller_college_df, col=colors[as.factor(colors)])
source('D:/NUS/ChadCode/TBA2104/tut02/T2.R', echo=TRUE)
question_d <- function(){
#Complete implementation...
plot(y=college$Apps, x=college$Private, xlab = 'Private?', ylab = 'Number of Applications', main = 'Comparison of number of applications for Private and Public University')
}
question_d()
colors <-c('blue','red')
pairs(smaller_college_df, col=colors[as.factor(colors)])
question_d <- function(){
#Complete implementation...
appsPvt <- college[c(which(colnames(college) == 'Private'),which(colnames(college) == 'Apps'))]
appsPvt$Apps <- as.numeric(appsPvt$Apps)
# y ~ grp
plot(appsPvt$Private,appsPvt$Apps, xlab = 'Private?', ylab = 'Number of Applications', main = 'Comparison of number of applications for Private and Public University')
}
question_d()
#Ex 61e2e110369e7f0d08196c39
#Assume that the dataset (College.csv) is found in the current
#working directory
college <- read.csv("College.csv", header = T)
#a)
#Use the `summary()` function to produce a numerical summary
summary(college)
#b)
#1. First obtain another dataframe that consists of 4 columns
#Apps, Accept, Enroll, Grade.Rate (in this order) and assign
#to a variable named `smaller_college_df`
#Ensure that the column names are Apps, Accept, Enroll, Grade.Rate (in this order)
#Also make sure that `smaller_college_df` is a data.frame
#2. Using the pairs function, produce a scatterplot matrix of `smaller_college_df`
#Complete implementation...
smaller_college_df <-college[c(which(colnames(college) == 'Apps'),which(colnames(college) == 'Accept'),which(colnames(college) == 'Enroll'),which(colnames(college) == 'Grad.Rate'))]
#ensure that this should be data.frame
class(smaller_college_df)
pairs(smaller_college_df)
#c)
#1. We will use "blue" to denote private university and "red" to denote non-private
#university. To do that, first obtain a vector of character (`colors`) containing
#the value "blue" or "red" matching the university type for that row.
#Hint: you might find it useful to cast a character to factor type
#2. Using colors, generate the same plot as (b) using the same colors from `colors`
#Complete implementation...
colors <-c('blue','red')
pairs(smaller_college_df, col=colors[as.factor(colors)])
#d)
#Use the plot() function to produce a side-by-side boxplots of Apps vs Private.
#Label your x-axis "Private?", y-axis "Number of Applications", and the title
#"Comparison of number of applications for Private and Public University"
#Hint: you might find it useful to cast a character to factor type
question_d <- function(){
#Complete implementation...
appsPvt <- college[c(which(colnames(college) == 'Private'),which(colnames(college) == 'Apps'))]
appsPvt$Apps <- as.numeric(appsPvt$Apps)
# y ~ grp
plot(appsPvt$Private,appsPvt$Apps, xlab = 'Private?', ylab = 'Number of Applications', main = 'Comparison of number of applications for Private and Public University')
}
question_d()
#e)
#Generate the scatterplot based on Top10perc
#To do that, first obtain a vector of character (`colors_top10perc`) containing
#following color value:
#<=30 : "red"
#<=50 : "orange"
#<=70 : "yellow"
#>70  : "green"
#Complete implementation...
colors_top10perc <- NA
colors_top10perc[college$Top10perc >  70] <- 'green'
colors_top10perc[college$Top10perc <= 70] <- 'yellow'
colors_top10perc[college$Top10perc <= 50] <- 'orange'
colors_top10perc[college$Top10perc <= 30] <- 'red'
plot(college$Top10perc, col=colors_top10perc)
#f)
#Use the hist() function to generate a histogram of Top10perc
question_f <- function(){
#Complete implementation...
hist(college$Top10perc, col=colors_top10perc)
}
question_f()
question_d <- function(){
#Complete implementation...
appsPvt <- college[c(which(colnames(college) == 'Private'),which(colnames(college) == 'Apps'))]
appsPvt$Apps <- as.numeric(appsPvt$Apps)
# y ~ grp
plot(appsPvt$Private,appsPvt$Apps, xlab = 'Private?', ylab = 'Number of Applications', main = 'Comparison of number of applications for Private and Public University')
}
question_d()
college <- read.csv("College.csv", header = T)
#a)
#Use the `summary()` function to produce a numerical summary
summary(college)
question_d <- function(){
#Complete implementation...
appsPvt <- college[c(which(colnames(college) == 'Private'),which(colnames(college) == 'Apps'))]
appsPvt$Apps <- as.numeric(appsPvt$Apps)
# y ~ grp
plot(appsPvt$Private, appsPvt$Apps, xlab = 'Private?', ylab = 'Number of Applications', main = 'Comparison of number of applications for Private and Public University')
}
question_d()
?plot
question_d <- function(){
#Complete implementation...
plot(college$Private, college$Apps, xlab = 'Private?', ylab = 'Number of Applications', main = 'Comparison of number of applications for Private and Public University')
}
question_d()
#Clustering of Iris Plant
Iris.features = iris
#remove the class column
Iris.features$Species <- NULL
#using k-means clustering
results <- kmeans(Iris.features, 3)
pairs(Iris.features, col=c("red","green3", "blue")[results$cluster])
View(results)
View(results)
?plot
question_d <- function(){
#Complete implementation...
plot(as.factor(college$Private), college$Apps)
#, xlab = 'Private?', ylab = 'Number of Applications',
# main = 'Comparison of number of applications for Private and Public University')
}
question_d()
question_d <- function(){
#Complete implementation...
plot(as.factor(college$Private), college$Apps, xlab = 'Private?', ylab = 'Number of Applications', main = 'Comparison of number of applications for Private and Public University')
}
question_d()
#Complete implementation...
colors <- NA
colors <- NA
colors[college$Private == 'Yes'] <- 'blue'
colors[college$Private == 'No'] <- 'red'
class(color)
class(colors)
colors<- as.factor(colors)
pcolors <- NA
pcolors[college$Private == 'Yes'] <- 'blue'
pcolors[college$Private == 'No'] <- 'red'
colors<- as.factor(pcolors)
rm(pcolors)
colors <- factor(college$Private)
pairs(smaller_college_df, col=c('blue','red')[colors])
#Complete implementation...
smaller_college_df <-college[c(which(colnames(college) == 'Apps'),which(colnames(college) == 'Accept'),which(colnames(college) == 'Enroll'),which(colnames(college) == 'Grad.Rate'))]
pairs(smaller_college_df, col=c('blue','red')[colors])
colors <- factor(college$Private)
colors['Yes']<- 'blue'
colors['No']<- 'red'
colors<- as.factor(colors)
pairs(smaller_college_df, col=colors)
colors['Yes']<- 'blue'
colors <- factor(college$Private)
rm(colors)
colors <- factor(college$Private)
colors['Yes']<- 'blue'
colors['No']<- 'red'
colors<- as.factor(colors)
rm(colors)
colors[college$Private == 'Yes']<- 'blue'
colors[college$Private == 'No']<- 'red'
colors<- as.factor(colors)
rm(colors)
colors <-college$Private
colors[college$Private == 'Yes']<- 'blue'
colors[college$Private == 'No']<- 'red'
colors<- as.factor(colors)
rm(colors)
#Complete implementation...
colors <-college$Private
colors[college$Private == 2]<- 'blue'
rm(colors)
#Complete implementation...
colors <-college$Private
colors <- as.character(colors)
colors <- as.character(colors)
colors[college$Private == "Yes"]<- 'blue'
colors[college$Private == 'No']<- 'red'
colors<- as.factor(colors)
pairs(smaller_college_df, col=colors)
colors <-college$Private
colors <- as.character(colors)
colors[college$Private == "Yes"]<- 'blue'
colors[college$Private == 'No']<- 'red'
colors
colors<- as.factor(colors)
colors
pairs(smaller_college_df, col=colors)
