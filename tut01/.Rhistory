#Complete implementation...
college <- read.csv('college.csv')
setwd('D:/NUS/ChadCode/TBA2104/tut01')
setwd('D:/NUS/ChadCode/TBA2104/Rtic2014/tut01')
#Complete implementation...
college <- read.csv('college.csv')
#Complete implementation...
first_three_college <- head(college)
first_three_college
#Complete implementation...
first_three_college <- head(college, n=3L)
first_three_college
college_names <-college[,'X']
#should show:
# [1] "Abilene Christian University"
# [2] "Adelphi University"
# [3] "Adrian College"
#...
print(college_names)
#Complete implementation...
df_column_names <-colnames(college)
df_column_names
#this should give you the college names also
print(college[,df_column_names[1]])
#this should give you the college names also
print(df_column_names)
#Complete implementation...
df_row_names <-rownames(college)
#should show:
#"1"   "2"   "3"   "4" ...
print(df_row_names)
rownames(college1) <- NULL
rownames(college1) <- college1$X
rownames(college1)
#h)
#For the purpose of autograder grading, we will not overwrite to `college`
#instead, let's create a new variable `college1`
college1 <- college
rownames(college1) <- NULL
rownames(college1) <- college1$X
rownames(college1)
colnames(college1)
first_three_college <- head(college, n=3L)
#e)
#Retrieve the vector of the university names and assign to a variable
#named `college_names`
#Complete implementation...
college_names <-college[,'X']
#should show:
# [1] "Abilene Christian University"
# [2] "Adelphi University"
# [3] "Adrian College"
#...
print(college_names)
#f)
#Obtain the vector of the column names of the `college` dataframe and
#assign to a variable named `df_column_names`
#Complete implementation...
df_column_names <-colnames(college)
#this should give you the college names also
print(df_column_names)
#g)
#Obtain the vector of the row names of the `college` dataframe and
#assign to a variable named `df_row_names`
#Complete implementation...
df_row_names <-rownames(college)
#should show:
#"1"   "2"   "3"   "4" ...
print(df_row_names)
#h)
#For the purpose of autograder grading, we will not overwrite to `college`
#instead, let's create a new variable `college1`
college1 <- college
View(college)
rm(college1)
rm(first_three_college)
rm(college_names)
rm(df_column_names)
rm(df_row_names)
first_three_college <- head(college, n=3L)
#e)
#Retrieve the vector of the university names and assign to a variable
#named `college_names`
#Complete implementation...
college_names <-college[,'X']
#should show:
# [1] "Abilene Christian University"
# [2] "Adelphi University"
# [3] "Adrian College"
#...
print(college_names)
#f)
#Obtain the vector of the column names of the `college` dataframe and
#assign to a variable named `df_column_names`
#Complete implementation...
df_column_names <-colnames(college)
#this should give you the college names also
print(df_column_names)
#g)
#Obtain the vector of the row names of the `college` dataframe and
#assign to a variable named `df_row_names`
#Complete implementation...
df_row_names <-rownames(college)
#should show:
#"1"   "2"   "3"   "4" ...
print(df_row_names)
#h)
#For the purpose of autograder grading, we will not overwrite to `college`
#instead, let's create a new variable `college1`
college1 <- college
View(college)
View(college1)
college_names
#Complete implementation...
rownames(college1) <- college_names
View(college1)
View(college1)
View(college1)
college1$X <- NULL
#Complete implementation...
total_num_appl_received <-sum(college1$Apps,na.rm = TRUE)
#Complete implementation...
average_num_appl_received <-mean(college1$Apps,na.rm = TRUE)
#Complete implementation...
uni_with_more_than_5000_appl <- college1[which(college1$Apps > 5000),c(which(colnames(college1) == 'X'),which(colnames(college1) == 'Apps'))]
#Complete implementation...
avg_gradrate_with_more_than_5000_appl <- college[which(college$Apps > 5000),c(which(colnames(college) == 'X'),which(colnames(college) == 'Apps'),which(colnames(college) == 'Grad.Rate'))]
View(avg_gradrate_with_more_than_5000_appl)
#Complete implementation...
avg_gradrate_with_not_more_than_5000_appl <-mean(avg_gradrate_with_more_than_5000_appl$Grad.Rate)
#Complete implementation...
uni_with_highest_full_time_undergrad <-college[which.max(college$F.Undergrad),c(which(colnames(college) == 'X'),which(colnames(college) == 'F.Undergrad'))]
#Complete implementation...
uni_with_lowest_full_time_undergrad <-college[which.min(college$F.Undergrad),c(which(colnames(college) == 'X'),which(colnames(college) == 'F.Undergrad'))]
View(uni_with_lowest_full_time_undergrad)
