iris$Sepal.Length
knitr::opts_chunk$set(echo = TRUE)
iris[["Sepal.Length"]] #5.1 4.9 4.7 4.6 5.0 ...
#use the $ operator and the column name
#(case sensitive)
iris$Sepal.Length #5.1 4.9 4.7 4.6 5.0 ...
class(iris$Sepal.Length) #numeric
#alternatively
#this notation is useful for cases where the column
#name contain spaces
iris[["Sepal.Length"]] #5.1 4.9 4.7 4.6 5.0 ...
#get the first 3 values sepal lengths
iris$Sepal.Length[1:3] #5.1 4.9 4.7
#get the 10th row
#take note of the ,
#if we don't specify the column index, it will return all columns
iris[10,]
#   Sepal.Length Sepal.Width Petal.Length Petal.Width Species
#10          4.9         3.1          1.5         0.1  setosa
#get the first column
iris[,1] #5.1 4.9 4.7 4.6 5.0 ...
#can specify both to get a specific value
#this will get the 3rd column value of row 2
iris[2, 3] #1.4
#returns a data frame with the first 10 rows of the
#1st and 3rd column
iris[1:10, c(1,3)]
irisCopy <- iris
colnames(irisCopy) <- c("sepal_length", "sepal_width", "petal_length", "petal_width", "species")
colnames(irisCopy) #"sepal_length" "sepal_width"  "petal_length" "petal_width"  "species"
#typically row names should not be used for data modeling
#we could use the row names to better represent the data
#rather than just index values (1, 2, 3, etc)
rownames(irisCopy)[1] <- "first setosa"
View(irisCopy)
covidCases0101 <- read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/01-01-2021.csv")
View(covidCases0101)
covidCases0101Simplified <- covidCases0101[, c("Country_Region", "Confirmed", "Deaths")]
#set working directory to c:\
setwd("D:/NUS/ChadCode/TBA2104/03dataframe")
write.csv(covidCases0101Simplified, "covid_01_01_2021.csv", row.names = F)
write.table(covidCases0101Simplified, "covid_01_01_2021.txt", row.names = F)
getwd()
setwd("D:/NUS/ChadCode/TBA2104/03dataframe")
getwd
getwd()
#Complete implementation...
titanic <- read.csv('titanic.csv')
View(titanic)
length(titanic$PassengerId)
colnames(titanic)
names(titanic)
str(titanic)
head(titanic)
titanic[Sex == 'female',]
titanic[titanic$Sex == 'female',]
#c)
#filter the dataset (using the dataframe indexing operator) to obtain
#a dataframe with only female passengers
femalePassengers <-titanic[titanic$Sex == 'female',]
colname(titanic)
colnames(titanic)
length(femalePassengers$Survived == 1)
length(femalePassengers[~Survived == 1,])
length(femalePassengers[femalePassengers$Survived == 1,])
class(femalePassengers$Survived)
length(femalePassengers[femalePassengers$Survived == 0,])
femalePassengers[femalePassengers$Survived == 0,]
table(femalePassengers$Survived)/length(femalePassengers$Survived)
table(femalePassengers$Survived == 1)/length(femalePassengers$Survived)
length(which(femalePassengers$Survived == 1))
length(which(femalePassengers$Survived == 1))/length(femalePassengers$PassengerId)
length(which(femalePassengers$Survived == 1))/length(femalePassengers$Survived)
return (ratio)
source('D:/NUS/ChadCode/TBA2104/03dataframe/dataframe.R', echo=TRUE)
